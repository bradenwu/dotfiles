#!/usr/bin/env bash

# Cross-platform functions
# These functions work on both Linux and macOS

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -c"%s" "${tmpFile}" 2> /dev/null || stat -f"%z" "${tmpFile}" 2> /dev/null
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null || stat -f"%z" "${tmpFile}.gz" 2> /dev/null
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git's colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn't break anything for binary files)
	if command_exists python3; then
		python3 -c $'import http.server;\nimport socketserver;\n\nclass MyHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def end_headers(self):\n        self.send_header("Content-Type", "text/plain")\n        self.send_header("Charset", "UTF-8")\n        super().end_headers()\n\nwith socketserver.TCPServer(("", port), MyHTTPRequestHandler) as httpd:\n    print(f"Serving at port {port}")\n    httpd.serve_forever()' "$port";
	else
		python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
	fi
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version 2>/dev/null; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Check if command exists
function command_exists() {
	command -v "$1" >/dev/null 2>&1
}

# Load platform-specific functions
if [[ "$OSTYPE" == "darwin"* ]]; then
	# Load macOS-specific functions
	if [ -f ~/.functions.macos ]; then
		source ~/.functions.macos
	fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
	# Load Linux-specific functions
	if [ -f ~/.functions.linux ]; then
		source ~/.functions.linux
	fi
fi

# Git-related functions
function check_is_git_dir() {
    git remote -v  > /dev/null
    echo "$?"
}

function updatecode() {
	# Check if current directory is a git repo, otherwise check subdirectories
    IS_GIT_DIR=$(check_is_git_dir)
    if [ $IS_GIT_DIR -eq 0 ];then
        git pull -r || git stash && git pull -r && git stash apply
    else
        for DIR in `find . -type d -maxdepth 1`;do
            cd $DIR 
            IS_GIT_DIR=$(check_is_git_dir)
            if [ $IS_GIT_DIR -eq 0 ];then
                git pull -r || git stash && git pull -r && git stash apply;
            fi
            cd -
        done
    fi;
}

# Quick navigation aliases
function ..() { cd ..; }
function ...() { cd ../..; }
function ....() { cd ../../..; }
function .....() { cd ../../../..; }

# Create backup of a file
function bak() {
	cp "$1" "$1.bak"
}

# Restore backup
function unbak() {
	cp "$1.bak" "$1"
}

# Extract archives
function extract() {
	if [ -f "$1" ]; then
		case "$1" in
			*.tar.bz2) tar xjf "$1" ;;
			*.tar.gz) tar xzf "$1" ;;
			*.bz2) bunzip2 "$1" ;;
			*.rar) unrar x "$1" ;;
			*.gz) gunzip "$1" ;;
			*.tar) tar xf "$1" ;;
			*.tbz2) tar xjf "$1" ;;
			*.tgz) tar xzf "$1" ;;
			*.zip) unzip "$1" ;;
			*.Z) uncompress "$1" ;;
			*.7z) 7z x "$1" ;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

function getip() {
	curl myip.ipip.net
}

function use_proxy() {
	# Load proxy settings from environment variables if available
	if [ -n "$HTTP_PROXY" ]; then
		export http_proxy="$HTTP_PROXY"
		export https_proxy="$HTTP_PROXY"
		export HTTP_PROXY="$HTTP_PROXY"
		export HTTPS_PROXY="$HTTP_PROXY"
	else
		export http_proxy="http://127.0.0.1:18080"
		export https_proxy="http://127.0.0.1:18080"
		export all_proxy="http://127.0.0.1:18080"
		export no_proxy="localhost,127.0.0.1,::1"


	fi
}

function no_proxy() {
	unset http_proxy
	unset https_proxy
	unset HTTP_PROXY
	unset HTTPS_PROXY
}
